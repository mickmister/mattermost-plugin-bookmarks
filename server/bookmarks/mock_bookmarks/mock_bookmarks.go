// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jfrerich/mattermost-plugin-bookmarks/server/bookmarks (interfaces: IBookmarks)

// Package mock_bookmarks is a generated GoMock package.
package mock_bookmarks

import (
	gomock "github.com/golang/mock/gomock"
	bookmarks "github.com/jfrerich/mattermost-plugin-bookmarks/server/bookmarks"
	reflect "reflect"
)

// MockIBookmarks is a mock of IBookmarks interface
type MockIBookmarks struct {
	ctrl     *gomock.Controller
	recorder *MockIBookmarksMockRecorder
}

// MockIBookmarksMockRecorder is the mock recorder for MockIBookmarks
type MockIBookmarksMockRecorder struct {
	mock *MockIBookmarks
}

// NewMockIBookmarks creates a new mock instance
func NewMockIBookmarks(ctrl *gomock.Controller) *MockIBookmarks {
	mock := &MockIBookmarks{ctrl: ctrl}
	mock.recorder = &MockIBookmarksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIBookmarks) EXPECT() *MockIBookmarksMockRecorder {
	return m.recorder
}

// AddBookmark mocks base method
func (m *MockIBookmarks) AddBookmark(arg0 *bookmarks.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBookmark", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBookmark indicates an expected call of AddBookmark
func (mr *MockIBookmarksMockRecorder) AddBookmark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBookmark", reflect.TypeOf((*MockIBookmarks)(nil).AddBookmark), arg0)
}

// ApplyFilters mocks base method
func (m *MockIBookmarks) ApplyFilters(arg0 *bookmarks.Filters) (*bookmarks.Bookmarks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyFilters", arg0)
	ret0, _ := ret[0].(*bookmarks.Bookmarks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyFilters indicates an expected call of ApplyFilters
func (mr *MockIBookmarksMockRecorder) ApplyFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyFilters", reflect.TypeOf((*MockIBookmarks)(nil).ApplyFilters), arg0)
}

// ByPostCreateAt mocks base method
func (m *MockIBookmarks) ByPostCreateAt() ([]*bookmarks.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByPostCreateAt")
	ret0, _ := ret[0].([]*bookmarks.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByPostCreateAt indicates an expected call of ByPostCreateAt
func (mr *MockIBookmarksMockRecorder) ByPostCreateAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByPostCreateAt", reflect.TypeOf((*MockIBookmarks)(nil).ByPostCreateAt))
}

// DeleteBookmark mocks base method
func (m *MockIBookmarks) DeleteBookmark(arg0 string) (*bookmarks.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookmark", arg0)
	ret0, _ := ret[0].(*bookmarks.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBookmark indicates an expected call of DeleteBookmark
func (mr *MockIBookmarksMockRecorder) DeleteBookmark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookmark", reflect.TypeOf((*MockIBookmarks)(nil).DeleteBookmark), arg0)
}

// DeleteLabel mocks base method
func (m *MockIBookmarks) DeleteLabel(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLabel indicates an expected call of DeleteLabel
func (mr *MockIBookmarksMockRecorder) DeleteLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockIBookmarks)(nil).DeleteLabel), arg0, arg1)
}

// GetBmarkLabelNames mocks base method
func (m *MockIBookmarks) GetBmarkLabelNames(arg0 *bookmarks.Bookmark) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBmarkLabelNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBmarkLabelNames indicates an expected call of GetBmarkLabelNames
func (mr *MockIBookmarksMockRecorder) GetBmarkLabelNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBmarkLabelNames", reflect.TypeOf((*MockIBookmarks)(nil).GetBmarkLabelNames), arg0)
}

// GetBmarkTextOneLine mocks base method
func (m *MockIBookmarks) GetBmarkTextOneLine(arg0 *bookmarks.Bookmark, arg1 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBmarkTextOneLine", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBmarkTextOneLine indicates an expected call of GetBmarkTextOneLine
func (mr *MockIBookmarksMockRecorder) GetBmarkTextOneLine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBmarkTextOneLine", reflect.TypeOf((*MockIBookmarks)(nil).GetBmarkTextOneLine), arg0, arg1)
}

// GetBookmark mocks base method
func (m *MockIBookmarks) GetBookmark(arg0 string) (*bookmarks.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmark", arg0)
	ret0, _ := ret[0].(*bookmarks.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmark indicates an expected call of GetBookmark
func (mr *MockIBookmarksMockRecorder) GetBookmark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmark", reflect.TypeOf((*MockIBookmarks)(nil).GetBookmark), arg0)
}

// GetBookmarksWithLabelID mocks base method
func (m *MockIBookmarks) GetBookmarksWithLabelID(arg0 string) (*bookmarks.Bookmarks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarksWithLabelID", arg0)
	ret0, _ := ret[0].(*bookmarks.Bookmarks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarksWithLabelID indicates an expected call of GetBookmarksWithLabelID
func (mr *MockIBookmarksMockRecorder) GetBookmarksWithLabelID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarksWithLabelID", reflect.TypeOf((*MockIBookmarks)(nil).GetBookmarksWithLabelID), arg0)
}
